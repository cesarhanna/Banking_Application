package com.cesarhanna;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;

public class Customer {

    private String customerName;
    private final ArrayList<Transaction> transactions;
    private final UUID customerUniqueIdentifier;

    public Customer(String customerName, UUID customerUniqueIdentifier, Double initialTransaction) {
        this.customerName = customerName;
        this.customerUniqueIdentifier = customerUniqueIdentifier;
        this.transactions = new ArrayList<>();
        addTransaction(initialTransaction);
    }

    public String getCustomerName() {
        return customerName;
    }

    public ArrayList<Transaction> getTransactions() {
        return transactions;
    }

    public UUID getCustomerUniqueIdentifier() {
        return customerUniqueIdentifier;
    }

    public void setCustomerName(String customerName) {
        this.customerName = customerName;
    }

    /*Date date = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        dateFormat.format(date);
        This is the way to construct the date format that will be automatically generated by the system*/

    public void addTransaction(Double transaction) {
        if (transaction > 0) {
            Date date = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            dateFormat.format(date);
            transactions.add(new Transaction(transaction, date));
        } else {
            System.out.println("Enter a valid amount");
        }
    }

    public void withdrawTransaction(Double transaction) {
        Double total = 0.0;
        for (int i=0; i<getTransactions().size(); i++) { // "int i=0; i<transactions().size(); i++" would also works.
            total = total + getTransactions().get(i).getAmount();
        }
        if (total - transaction >= 0) {
            Date date = new Date();
            DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
            dateFormat.format(date);
            transactions.add(new Transaction(-transaction, date));
        } else {
            System.out.println("Not enough credit to make a withdrawal");
        }
    }

    public void editCustomerTransAmount() throws InputMismatchException {
        int x = 1;
        do {
            try {
                System.out.println("Enter transaction amount to be edited: ");
                Scanner scanner = new Scanner(System.in);
                Double selectedTransaction = scanner.nextDouble();
                int transactionPosition = findTransaction(selectedTransaction);
                if (transactionPosition >= 0) {
                    System.out.println("Enter new transaction amount: ");
                    scanner = new Scanner(System.in);
                    Double newTransAmount = scanner.nextDouble();
                    Transaction amount = this.transactions.get(transactionPosition);
                    amount.setAmount(newTransAmount);
                }
                else {
                    System.out.println("Transaction doesn't exist");
                }
                x = 2;
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please try again");
            }
        } while (x == 1);
    }

    private int findTransaction(Double amountOfTransaction) {
        for (int i=0; i<transactions.size(); i++) {
            Transaction transaction = this.transactions.get(i);
            if (transaction.getAmount().equals(amountOfTransaction)) {
                return i;
            }
        }
        return -1;
    }
}